(()=>{"use strict";var __webpack_require__={};(()=>{__webpack_require__.d=(exports,definition)=>{for(var key in definition){if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});}}};})();(()=>{__webpack_require__.o=(obj,prop)=>(Object.prototype.hasOwnProperty.call(obj,prop))})();var __webpack_exports__={};__webpack_require__.d(__webpack_exports__,{"default":()=>(deprecated)});;const external_wp_hooks_namespaceObject=window["wp"]["hooks"];;const logged=Object.create(null);function deprecated(feature,options={}){const{since,version,alternative,plugin,link,hint}=options;const pluginMessage=plugin?` from ${plugin}`:'';const sinceMessage=since?` since version ${since}`:'';const versionMessage=version?` and will be removed${pluginMessage} in version ${version}`:'';const useInsteadMessage=alternative?` Please use ${alternative} instead.`:'';const linkMessage=link?` See: ${link}`:'';const hintMessage=hint?` Note: ${hint}`:'';const message=`${feature} is deprecated${sinceMessage}${versionMessage}.${useInsteadMessage}${linkMessage}${hintMessage}`;if(message in logged){return;}
(0,external_wp_hooks_namespaceObject.doAction)('deprecated',feature,options,message);console.warn(message);logged[message]=true;}
(window.wp=window.wp||{}).deprecated=__webpack_exports__["default"];})();